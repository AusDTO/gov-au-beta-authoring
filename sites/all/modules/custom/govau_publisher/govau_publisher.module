<?php
require_once('simple_html_dom.php');

/**
 * Implements hook_menu().
 *
 * @see govau_publisher_menu_load()
 */
function govau_publisher_menu()
{
    $items = array();

    $items['admin/config/content/govau_publisher'] = array(
        'title' => 'GOV.AU Push module settings',
        'description' => 'GOV.AU Push module settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('govau_publisher_admin_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['api/node/%/%'] = array(
        'title' => 'Node as JSON for GOV.AU access',
        'page callback' => 'govau_publisher_node_json',
        'page arguments' => array(2, 3),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function govau_publisher_node_json($nid, $vid)
{
    $node = node_load($nid, $vid);
    if ($node) {
        drupal_json_output(
            json_encode_objects(
                [govau_publisher_prepare_node($node)]
            )
            [0]
        );
    } else {
        // no published revision
        drupal_not_found();
        return;
    }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function govau_publisher_form_node_form_alter(&$form, $form_state)
{
    if (isset($form['field_section']) && $form["#node"]->type == 'gov_au_page') {
        $form['field_section']['und'][0]['value']['#type'] = 'select';
        $url = variable_get("govau_api_url") . "/api/sections";
        $drupal_http_request_options = array(
            'method' => 'GET',
            'timeout' => 15,
        );
        $request = drupal_http_request($url, $drupal_http_request_options);
        if (isset($request->data)) {
            $result = json_decode($request->data, true);
        }

        $sections = array();
        foreach ($result as $section) {
            $sections["{$section['id']}"] = t($section['name']);
        }

        $form['field_section']['und'][0]['value']['#options'] = $sections;

        $form['field_template']['und'][0]['value']['#type'] = 'select';
        $url = variable_get("govau_api_url") . "/api/templates";
        $drupal_http_request_options = array(
            'method' => 'GET',
            'timeout' => 15,
        );

        $request = drupal_http_request($url, $drupal_http_request_options);
        if (isset($request->data)) {
            $result = json_decode($request->data, true);
        }

        $templates = array();
        $template_attrs = array();
        foreach ($result as $key => $val) {
            $templates[$key] = t($val['name']);
            $template_attrs[$key] = array(
                'data-image-preview' => variable_get("govau_api_url") . $val['image']
            );
        }
        $form['field_template']['und'][0]['value']['#options'] = $templates;
        $form['field_template']['und'][0]['value']['#options_attributes'] = $template_attrs;

        $form['field_template']['und'][0]['value']['#field_suffix'] = "
        <img id='template-preview' height='50' width='50'>
        <script>
          jQuery('#template-preview').attr('src', jQuery('option:selected', jQuery('#edit-field-template-und-0-value')).attr('data-image-preview'));
          jQuery('#edit-field-template-und-0-value').change(function() {
            var image_url = jQuery('option:selected', this).attr('data-image-preview');
            jQuery('#template-preview').attr('src', image_url)
          });
        </script>

    ";

        $form['field_section']['und'][0]['value']['#size'] = 1;
        $form['field_template']['und'][0]['value']['#size'] = 1;
    }

}

function govau_publisher_admin_form()
{
    $form = array('#validate' => Array('govau_publisher_admin_validate'));
    $form['govau_api_url'] = array(
        '#type' => 'textfield',
        '#title' => t('GOV.AU API URL'),
        '#default_value' => variable_get('govau_api_url'),
        '#size' => 255,
        '#maxlength' => 255,
        '#description' => t("GOV.AU API URL"),
        '#required' => TRUE,
    );

    $form['govau_content_analysis_api_url'] = array(
        '#type' => 'textfield',
        '#title' => t('GOV.AU Content Analysis API URL'),
        '#default_value' => variable_get('govau_content_analysis_api_url'),
        '#size' => 255,
        '#maxlength' => 255,
        '#description' => t('GOV.AU Content Analysis API URL'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function govau_publisher_admin_validate($form, &$form_state)
{
    if (!(strpos($form_state['values']['govau_api_url'], "http") !== FALSE)) {
        form_set_error('govau_api_url', "GOV.AU API URL must include protocol http(s)");
    }
    if (substr($form_state['values']['govau_api_url'], -1) == "/") {
        form_set_error('govau_api_url', "GOV.AU API URL cannot have trailing slash");
    }
}

/**
 * Mark objects as being objects.
 */
function json_encode_objects($var)
{
    if (is_object($var)) {
        $var = (array)$var;
        $var['#node_export_object'] = '1';
    }
    if (is_array($var)) {
        foreach ($var as $key => $value) {
            $var[$key] = json_encode_objects($value);
        }
    }
    return $var;
}

function govau_publisher_prepare_node($node)
{
    $node = node_export_prepare_node($node);
    foreach (get_object_vars($node) as $key => &$var) {
        if (strpos($key, "field_") === 0) {
            // taxonomy export
            if (isset($node->{$key}['und'][0]['tid'])) {
                foreach ($node->{$key}['und'] as &$term) {
                    $term = json_encode_objects([taxonomy_term_load($term['tid'])])[0];
                }
            }
// node reference export
            if (isset($node->{$key}['und'][0]['target_id'])) {
                foreach ($node->{$key}['und'] as &$ref) {
                    $target_node = node_load($ref['target_id']);
                    $ref = Array("target_id" => $ref['target_id'], "target_uuid" => $target_node->uuid);
                }
            }

        }
        // html field processing
        if ($key == 'body') {
            $html = str_get_html($var["und"][0]["value"]);
            foreach ($html->find('a') as &$element) {
                // internal links should have uuids
                if (!strstr($element->href, '://')) {
                    $system_path = $element->href;
                    if (!strstr($element->href, 'node')) $system_path = drupal_lookup_path('source', substr($element->href, 1));
                    $link_node = node_load(arg(2, $system_path));
                    $element->{'data-uuid'} = $link_node->uuid;
                }
            }
            $node->{$key}["und"][0]["value"] = (String)$html;
        }


    }

    return $node;
}

function govau_publisher_workbench_moderation_transition($node, $previous_state, $new_state)
{// Acceptable server response codes.


    if ($new_state == "published") {
        $payload = json_encode(Array("updated_node" => $node->nid, "updated_revision" => $node->vid));
        $url = variable_get("govau_api_url") . "/api/nodes";
        $headers = array('Content-Type' => 'application/json');
        $drupal_http_request_options = array(
            'method' => 'POST',
            'data' => $payload,
            'timeout' => 15,
            'headers' => $headers,
        );

// Where the magic happens:
        $request = drupal_http_request($url, $drupal_http_request_options);
        /*if (isset($request->data)) {
            $result = json_decode($request->data);
        }*/
// Log any errors.
        if (!isset($request->code) or $request->code != "201"
            //or !isset($result) or empty($result)
        ) {
            //fail
            drupal_set_message('Failed submission to GOV.AU.', 'error');
            watchdog('govau_publisher', 'Failed submission to GOV.AU. ' . json_encode($request), NULL, WATCHDOG_ERROR);
            if (class_exists('Rollbar')) {
                Rollbar::report_message('Failed submission to GOV.AU. ', Level::ERROR, array("data" => json_encode($request)));
            }
            workbench_moderation_moderate($node, $previous_state);
        } else //
            drupal_set_message('Submitted to GOV.AU.');
        // success
    }

}

function govau_publisher_block_info() {
    $blocks = array();
    $blocks['govau_publisher'] = array(
        'info' => t('GOVAU Content Linting'),
    );
    return $blocks;
}


function govau_publisher_block_view($delta = '') {
    $block = array();

    switch ($delta) {
        case 'govau_publisher':
            $block['subject'] = 'GOVAU Content Linter';
            $block['content'] = _govau_publisher_CONTENT();
            break;
    }
    return $block;
}


function _govau_publisher_CONTENT() {
    $node = menu_get_object();

    if(arg(2) == 'draft'){
        # Load current revision if viewing a draft
        $node = workbench_moderation_node_current_load($node);
    }

    $output = t('No linting errors');
    $url = variable_get('govau_content_analysis_api_url') . '/api/linters';
    $payload = json_encode(Array('content' => $node->{'body'}['und'][0]['value']));
    $headers = array('Content-Type' => 'application/json');

    $drupal_http_request_options = array(
        'method' => 'POST',
        'data' => $payload,
        'timeout' => 15,
        'headers' => $headers
    );

    $request = drupal_http_request($url, $drupal_http_request_options);
    $html = str_get_html($node->{'body'}["und"][0]["value"]);

    if(isset($request->data)){
        $result = json_decode($request->data, true);

        if(count($result) > 0){
            foreach($result as $key => $val){
                $html = str_replace($key, "<span style='background-color:yellow' title='{$val}'>{$key}</span>", $html);
            }
            $output = $html;
        }

    } else {
        $output = t('Linting information could not be retrieved from GOVAU');
    }

    return "<div style='background-color:lavender'>{$output}</div>";
}