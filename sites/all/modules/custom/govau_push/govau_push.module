<?php
require_once('sites/all/libraries/simple_html_dom.php');
require_once('sites/all/libraries/php-jwt/src/JWT.php');
/**
 * Implements hook_help().
 *
 * Displays help and module information.
 */
function govau_push_help($path, $arg)
{
    switch ($path) {
        case 'admin/help#govau_push':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('Post content to GOV.AU API') . '</p>';
            $output .= '</ul>';
            return $output;
    }
}

/**
 * Implements hook_menu().
 *
 * @see govau_push_menu_load()
 */
function govau_push_menu()
{
    $items = array();

    $items['admin/govau-submission-results/resend/%'] = array(
        'title' => t('Post again to GOV.AU API'),
        'page callback' => 'govau_push_resend',
        'page arguments' => array(3),
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array(TRUE),
        'access callback' => user_access('administer site configuration'),
    );
    $items['admin/govau-taxonomy-push'] = array(
        'title' => t('Push taxonomies to GOV.AU API'),
        'page callback' => 'govau_push_taxonomy',
        'page arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array(TRUE),
        'access callback' => user_access('administer site configuration'),
    );

    $items['admin/config/content/govau_push'] = array(
        'title' => 'GOV.AU Push module settings',
        'description' => 'GOV.AU Push module settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('govau_push_admin_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['node/%node/govau_status'] = array(
        'title' => 'GOV.AU Status',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('govau_push_node_status', 1),
        'access callback' => 'node_access',
        'access arguments' => array('update', 1),
        'weight' => 0,
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE
    );

    return $items;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function govau_push_form_node_form_alter(&$form, $form_state)
{
    // Add a 'View changes' button on the node edit form.
    $form['actions']['preview_govau'] = array(
        '#type' => 'submit',
        '#value' => t('Preview on GOV.AU'),
        '#weight' => 12,
        '#submit' => array('govau_push_node_preview'),
    );
    $form['#prefix'] =
        '<div class="messages">
<b>GOV.AU Page Metrics</b><br/>
<b>Unique pageviews:</b> <a href="#">78.8k per day</a><br/>
<b>Problem reports:</b> <a href="#">17.3 per week</a><br/>
<b>Searches started from this page:</b> <a href="#">23.6 per day</a><br/>
<b>Users left by searching for:</b> <a href="#">ASIC</a> (331)<br/>
</div>'
    ;

}

function get_user_jwt()
{
    global $user;


    $payload = array(
        "sub" => $user->mail,
        "aud" => "gov.au",
        "iat" => time(),
        "exp" => time() + 90, // time in the future
        "nbf" => time() - 90);
    return Firebase\JWT\JWT::encode($payload, 'mysecretkey');
}

/**
 * Implements hook_form().
 */
function govau_push_node_status($form, &$form_state)
{


    // Import your static HTML page
    $form = array();
    $form['#action'] = variable_get('govau_api_url') . '/admin';
    $form['#method'] = 'GET';
    $form['html_markup'] = array('#markup' =>
        '<input type="hidden" name="token" value="' . get_user_jwt() . '"/>' .
        '<button type="submit">Submit!</button></form>'
    );
    return $form;
}

function govau_push_node_preview($form, &$form_state)
{
    // calculate not yet saved changes for preview
    $node = node_form_submit_build_node($form, $form_state);
// Prepend preview to node edit form
    // node_preview is HTML as per node.pages.inc theme_node_preview()
    $json_b64 = base64_encode(
        drupal_json_encode(
            json_encode_objects(
                [govau_push_prepare_node($node)]
            )
            [0]
        )
    );
    $form_state['node_preview'] = '<div class="preview" style="border: solid 3px black;"><iframe width=100% height="600px" src="' . variable_get('govau_api_url') . '/api/pages/preview?token=' . get_user_jwt() . '&json_b64=' . $json_b64 . '"></iframe></div>';
    $form_state['rebuild'] = TRUE;
}

function govau_push_admin_form()
{
    $form = array();
    $form['govau_api_url'] = array(
        '#type' => 'textfield',
        '#title' => t('GOV.AU API URL'),
        '#default_value' => variable_get('govau_api_url'),
        '#size' => 255,
        '#maxlength' => 255,
        '#description' => t("GOV.AU API URL"),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function govau_push_admin_validate($form, &$form_state)
{


}

function govau_push_list()
{

}

function govau_push_views_api()
{
    return array('api' => 3.0);
}

function submit_key_value($payload, $path)
{

    $url = variable_get("govau_api_url") . $path;

// Acceptable server response codes.
    $benign_reponse_codes = array('200', '301', '302', '307');

// JSON Encode the payload.

    $headers = array('Content-Type' => 'application/json');

// save to DB
    $target = Array();
// TODO: Like in webform, this is not race-condition safe.
// Switch to using transactions as well?
    $next_id_query = db_select('govau_push_submissions');
    $next_id_query->addExpression('MAX(id) + 1', 'id');
    $target['id'] = $next_id_query->execute()->fetchField();
    if ($target['id'] == NULL) {
        $target['id'] = 1;
    }
    $target['timestamp'] = time();
    $target['url'] = $url;
    $target['header'] = json_encode($headers);
    $target['payload'] = $payload;
    $target['status'] = 'pending';
    $target['result'] = '-';
    $success = drupal_write_record('govau_push_submissions', $target);

// Write a log if we weren't able to save the target successfully.
    if ($success === FALSE) {
        watchdog('webform_remote_post', 'There was an error writing a new remote post target to the database.', array(), WATCHDOG_ERROR);
    }
// Repost data to each target. Begin by setting the
// options for drupal_http_request().
    $drupal_http_request_options = array(
        'method' => 'POST',
        'data' => $payload,
        'timeout' => 15,
        'headers' => $headers,
    );

// Where the magic happens:
    $request = drupal_http_request($url, $drupal_http_request_options);
    if (isset($request->data)) {
        $result = json_decode($request->data);
    }
// Log any errors.
    if (!isset($request->code) or !in_array($request->code, $benign_reponse_codes)
    ) {
        $log_msg = 'A remote post to %url  returned a ';
        $log_msg .= '\'%code\' code, which is a different HTTP response code ';
        $log_msg .= 'than expected. Please make sure that the remote post URL ';
        $log_msg .= 'is correct in the Remote Posts webform settings, and that ';
        $log_msg .= 'the post was received in the remote system. ';
        $log_msg .= $payload;
        $log_msg .= isset($request->data) ? $request->data : $request->error;

        watchdog(
            'govau_push',
            $log_msg,
            array(
                '%url' => $url,
                '%code' => $request->code,
            ),
            WATCHDOG_WARNING);
// Update the remote post target:
        db_update('govau_push_submissions')
            ->fields(array(
                'status' => 'failed',
                'result' => (isset($request->data) ? 'Data:' . substr($request->data, 0, 65000) : ' ') . (isset($request->error) ? ' Error:' . $request->error : ' '),
            ))
            ->condition('id', $target['id'])
            ->execute();
    } else {

// Update the remote post target:
        db_update('govau_push_submissions')
            ->fields(array(
                'status' => 'complete',
                'result' => $request->data
            ))
            ->condition('id', $target['id'])
            ->execute();
    }
    return $result;
}

/**
 * Implements hook_perm().
 */
function govau_push_permission()
{
    return array(
        'admin webform remote posts' => array(
            'title' => t('Admin GOV.AU pushes'),
            'description' => t('Grants access to the GOV.AU pushes settings'),
        ),
    );
}

/**
 * Mark objects as being objects.
 */
function json_encode_objects($var)
{
    if (is_object($var)) {
        $var = (array)$var;
        $var['#node_export_object'] = '1';
    }
    if (is_array($var)) {
        foreach ($var as $key => $value) {
            $var[$key] = json_encode_objects($value);
        }
    }
    return $var;
}

function govau_push_prepare_node($node)
{
    $node = node_export_prepare_node($node);
    foreach (get_object_vars($node) as $key => &$var) {
        if (strpos($key, "field_") === 0) {
            // taxonomy export
            if (isset($node->{$key}['und'][0]['tid'])) {
                foreach ($node->{$key}['und'] as &$term) {
                    $term = json_encode_objects([taxonomy_term_load($term['tid'])])[0];
                }
            }
// node reference export
            if (isset($node->{$key}['und'][0]['target_id'])) {
                foreach ($node->{$key}['und'] as &$ref) {
                    $target_node = node_load($ref['target_id']);
                    $ref = Array("target_id" => $ref['target_id'], "target_uuid" => $target_node->uuid);
                }
            }

        }
        // html field processing
        if ($key == 'body') {
            $html = str_get_html($var["und"][0]["value"]);
            foreach ($html->find('a') as &$element) {
                // internal links should have uuids
                if (!strstr($element->href, '://')) {
                    $system_path = $element->href;
                    if (!strstr($element->href, 'node')) $system_path = drupal_lookup_path('source', substr($element->href, 1));
                    $link_node = node_load(arg(2, $system_path));
                    $element->{'data-uuid'} = $link_node->uuid;
                }
            }
            $node->{$key}["und"][0]["value"] = (String)$html;
        }


    }

    return $node;
}

function govau_push_workbench_moderation_transition($node, $previous_state, $new_state)
{
    if ($new_state == "published") {
        govau_push_taxonomy();
        $result = submit_key_value(
            drupal_json_encode(
                json_encode_objects(
                    [govau_push_prepare_node($node)]
                )
                [0]
            )
            , '/api/pages');
        drupal_set_message('Submitted to GOV.AU.');
    }
}

function govau_push_entity_update($entity, $type)
{
    if ($type == 'taxonomy_term') govau_push_taxonomy();
}

function govau_push_entity_insert($entity, $type)
{
    if ($type == 'taxonomy_term') govau_push_taxonomy();
}


function govau_push_taxonomy()
{
    $data = [];
    $vocabs = taxonomy_get_vocabularies();
    foreach ($vocabs as $vocab) {
        $terms = taxonomy_get_tree($vocab->vid);
        $data = array_merge($data, $terms);
    }
    $payload = drupal_json_encode(json_encode_objects(Array("taxonomy_terms" => $data)));
    submit_key_value($payload, '/api/taxonomy_terms');
}


function govau_push_resend($id)
{

//Get submission
    $query = db_select('govau_push_submissions', 'fm');
    $query->fields('fm');
    $query->condition('fm.id', $id, '=');
    $post = $query->execute()->fetchAssoc();
// Acceptable server response codes.
    $benign_reponse_codes = array('200', '301', '302', '307');


// Repost data to each target. Begin by setting the
// options for drupal_http_request().
    $drupal_http_request_options = array(
        'method' => 'POST',
        'data' => $post['payload'],
        'timeout' => 15,
        'headers' => (array)json_decode($post['header']),
    );
// Where the magic happens:
    $request = drupal_http_request($post['url'], $drupal_http_request_options);

// Log any errors.
    if (isset($request->code) && !in_array($request->code, $benign_reponse_codes)) {
        $log_msg = 'A remote post to %url  returned a ';
        $log_msg .= '\'%code\' code, which is a different HTTP response code ';
        $log_msg .= 'than expected. Please make sure that the remote post URL ';
        $log_msg .= 'is correct in the settings, and that ';
        $log_msg .= 'the post was received in the remote system. ';
        $log_msg .= $post['payload'];
        $log_msg .= isset($request->data) ? $request->data : $request->error;

        watchdog(
            'govau_push',
            $log_msg,
            array(
                '%url' => $post['payload'],
                '%code' => $request->code,
            ),
            WATCHDOG_WARNING);
// Update the remote post target:
        db_update('govau_push_submissions')
            ->fields(array(
                'status' => 'failed',
                'result' => isset($request->data) ? 'Data:' . $request->data . 'Error:' . $request->error : 'Error:' . $request->error,
            ))
            ->condition('id', $id)
            ->execute();
    } else {

// Update the remote post target:
        db_update('govau_push_submissions')
            ->fields(array(
                'status' => 'complete',
                'result' => $request->data
            ))
            ->condition('id', $id)
            ->execute();
    }
    drupal_set_message(t('Submission "!number" was resent!', array('!number' => $id)));
    drupal_goto('admin/');
}
